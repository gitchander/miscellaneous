package main

import (
	"fmt"
	"sort"
	"strings"
)

const (
	unitSignalON  = '1'
	unitSignalOFF = '0'
)

// const (
// 	unitSignalON  = '='
// 	unitSignalOFF = '.'
// )

func mapKeys(m map[int]int) []int {
	keys := make([]int, 0, len(m))
	for key := range m {
		keys = append(keys, key)
	}
	return keys
}

func DecodeBits(bits string) string {

	bits = strings.Trim(bits, "0")

	var (
		mapOFF = make(map[int]int)
		mapON  = make(map[int]int)
	)

	k := 0
	n := len(bits)
	for i := 0; i < n; i++ {
		bit := bits[i]
		if i > 0 {
			if bit != bits[k] {
				length := i - k
				switch bits[k] {
				case unitSignalOFF:
					mapOFF[length]++
				case unitSignalON:
					mapON[length]++
				default:
					panic("invalid bits")
				}
				k = i
			}
		}
	}

	fmt.Println("map OFF:", mapOFF)
	fmt.Println("map ON: ", mapON)

	csOFF := mapKeys(mapOFF)
	csON := mapKeys(mapON)

	sort.Ints(csOFF)
	sort.Ints(csON)

	fmt.Println("cs OFF:", csOFF)
	fmt.Println("cs ON: ", csON)

	//timeDuration:= 2

	return bits
}

func DecodeMorse(morseCode string) string {
	return ""
}

func main() {
	s := "1100110011001100000011000000111111001100111111001111110000000000000011001111110011111100111111000000110011001111110000001111110011001100000011"
	//s := "=.=.=.=...=...===.=.===.===.......=.===.===.===...=.=.===...===.=.=...="
	//s := "=.===...=.===.=.=...=.===.=.=.......===...=.=.=.=...=.......===...=...=.=.=...===.......=.=.=...===...=.===.=...=.=...===.=...===.===.=...=.=.=.......=.===.===...===.===.===...=.=.===...=.===.=.=...===.=.=.......===.=.=.=...=.......=.=.=.===...=.===...=.===.=.=...=.=...===.=.=.......===...===.===.===.......===...=.=.=.=...=.......=.===.===.=...===.===.===...=.=...===.=...===.......===...=.=.=.=...=.===...===.......===...=.=.=.=...=...===.=.===.===.......===.=.===.=...===.===.===...=.=.===...=.===.=.=...===.=.=.......===.=.=.=...=.......=.===.=...=...=.===.=.=...=.=...=.===...===.=.=.=...=.===.=.=...===.=.===.===.......===.=.=...=...===.=.===.=...===.===.===...===.=.=...=...===.=.=.......=.===...=.=.=.......===.=.=...=...=.=.=...===.=.===.=...=.===.=...=.=...===.=.=.=...=...===.=.=.......=.===...===.=.=.=...===.===.===...=.=.=.===...=...===.===.=.=.===.===.......=.=.=...===.===.===.......===.=.===.===...===.===.===...=.=.===.......===.===...=.===...===.=.===.===.......=.=.=...===.=.===...=.=...=.===.===.=.......===.=.===.=...=.=.=.=...=...===.=.===.=...===.=.===...=.=...===.=...===.===.=.......=.=.===.=...===.===.===...=.===.=.......=...=.===.=...=.===.=...===.===.===...=.===.=...=.=.=.......=.===...===.=...===.=.=.......=...===.=.=.===...===.=.===.=...=...=.===.===.=...===...=.=...===.===.===...===.=...=.=.=...===.===.=.=.===.===.......=.===.===.===...=.=.===...=.=.=...===.......===.=.=...===.===.===.......===.=.===.===...===.===.===...=.=.===...=.===.=.......===.=.=.=...=...=.=.=...===.......=.=...===.=.......=.=.===.=...=.=...===.===.=...=.=.===...=.===.=...=.=...===.=...===.===.=.......===.===.===...=.=.===...===.......=.===.===...=.=.=.=...=.===...===.......===...=.=.=.=...=.......===.===...=...=.=.=...=.=.=...=.===...===.===.=...=.......=.=...=.=.="

	p := DecodeBits(s)

	fmt.Println(p)
}
